{"env_info": "sys.platform: linux\nPython: 3.8.2 (default, Mar 25 2020, 17:03:02) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: A100-PCIE-40GB\nCUDA_HOME: /usr/local/cuda\nNVCC: Build cuda_11.1.TC455_06.29069683_0\nGCC: gcc (Ubuntu 5.3.1-14ubuntu2) 5.3.1 20160413\nPyTorch: 1.8.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0\nOpenCV: 4.5.1\nMMCV: 1.3.10\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.1\nMMSegmentation: 0.15.0+4b218bc", "seed": null, "exp_name": "deeplabv3plus_r50-d8_512x512_160k_ade20k.py", "mmseg_version": "0.15.0+4b218bc", "config": "norm_cfg = dict(type='BN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='open-mmlab://resnet50_v1c',\n    backbone=dict(\n        type='ResNetV1c',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        dilations=(1, 1, 2, 4),\n        strides=(1, 2, 1, 1),\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=False,\n        style='pytorch',\n        contract_dilation=True,\n        pretrained='open-mmlab://resnet50_v1c'),\n    decode_head=dict(\n        type='DepthwiseSeparableASPPHead',\n        in_channels=2048,\n        in_index=3,\n        channels=512,\n        dilations=(1, 12, 24, 36),\n        c1_in_channels=256,\n        c1_channels=48,\n        dropout_ratio=0.01,\n        num_classes=9,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=1024,\n        in_index=2,\n        channels=256,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.01,\n        num_classes=9,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(type='LovaszLoss', loss_weight=0.8)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'ADE20KDataset'\ndata_root = '/home/amax/WorkSpace/zzy/data/SegCompetition_station'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (256, 256)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', reduce_zero_label=False),\n    dict(type='Resize', img_scale=(256, 256)),\n    dict(type='RandomCrop', crop_size=(256, 256), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(256, 256), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(256, 256),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=16,\n    workers_per_gpu=8,\n    train=dict(\n        type='ADE20KDataset',\n        data_root='/home/amax/WorkSpace/zzy/data/SegCompetition_station',\n        img_dir='images/training',\n        ann_dir='annotations_n9/training_max8',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', reduce_zero_label=False),\n            dict(type='Resize', img_scale=(256, 256)),\n            dict(type='RandomCrop', crop_size=(256, 256), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(256, 256), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='ADE20KDataset',\n        data_root='/home/amax/WorkSpace/zzy/data/SegCompetition_station',\n        img_dir='images/validation',\n        ann_dir='annotations_n9/validation_max8',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(256, 256),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='ADE20KDataset',\n        data_root='/home/amax/WorkSpace/zzy/data/SegCompetition_station',\n        img_dir='images/validation',\n        ann_dir='annotations_n9/validation_max8',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(256, 256),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = './WorkSpace/zzy/data/SegCompetition_station/logs_myfitconfig_lovasz_weight/iter_160000.pth'\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=800)\ncheckpoint_config = dict(by_epoch=False, interval=800)\nevaluation = dict(interval=50, metric='mIoU')\nwork_dir = './WorkSpace/zzy/data/SegCompetition_station/logs_ce_di_cl_llfinetune'\ngpu_ids = range(0, 1)\nseed = None\n", "CLASSES": ["background", "farmland", "city", "village", "water", "forest", "grass", "road", "others"], "PALETTE": [[0, 0, 0], [176, 176, 176], [0, 140, 255], [0, 255, 136], [255, 219, 18], [0, 168, 56], [0, 255, 0], [0, 0, 255], [255, 255, 255]]}
{"mode": "train", "epoch": 1, "iter": 3815, "lr": 0.00945, "memory": 9253, "aAcc": 0.8622, "mIoU": 0.5202, "mAcc": 0.6143, "IoU.background": 0.9975, "IoU.farmland": 0.7672, "IoU.city": 0.4862, "IoU.village": 0.4514, "IoU.water": 0.6741, "IoU.forest": 0.848, "IoU.grass": 0.1061, "IoU.road": 0.3512, "IoU.others": 0.0001, "Acc.background": 0.9983, "Acc.farmland": 0.8696, "Acc.city": 0.7008, "Acc.village": 0.6125, "Acc.water": 0.7998, "Acc.forest": 0.9367, "Acc.grass": 0.1391, "Acc.road": 0.4714, "Acc.others": 0.0001, "data_time": 0.01495, "decode.loss_seg": 0.33354, "decode.acc_seg": 87.89305, "aux.loss_seg": 0.48741, "aux.acc_seg": 80.64899, "loss": 0.82094, "time": 13.25627}
{"mode": "train", "epoch": 1, "iter": 3815, "lr": 0.00889, "memory": 9253, "aAcc": 0.8549, "mIoU": 0.5165, "mAcc": 0.6239, "IoU.background": 0.9981, "IoU.farmland": 0.7516, "IoU.city": 0.483, "IoU.village": 0.4478, "IoU.water": 0.6395, "IoU.forest": 0.8481, "IoU.grass": 0.1005, "IoU.road": 0.3716, "IoU.others": 0.0081, "Acc.background": 0.9994, "Acc.farmland": 0.8311, "Acc.city": 0.7273, "Acc.village": 0.5906, "Acc.water": 0.7971, "Acc.forest": 0.9394, "Acc.grass": 0.1591, "Acc.road": 0.5607, "Acc.others": 0.0102, "data_time": 0.0047, "decode.loss_seg": 0.3494, "decode.acc_seg": 87.37534, "aux.loss_seg": 0.48388, "aux.acc_seg": 79.94342, "loss": 0.83328, "time": 14.41216}
{"mode": "train", "epoch": 1, "iter": 3815, "lr": 0.00832, "memory": 9253, "aAcc": 0.8635, "mIoU": 0.5182, "mAcc": 0.6175, "IoU.background": 0.9982, "IoU.farmland": 0.7677, "IoU.city": 0.4515, "IoU.village": 0.4408, "IoU.water": 0.6734, "IoU.forest": 0.8486, "IoU.grass": 0.0993, "IoU.road": 0.3736, "IoU.others": 0.0103, "Acc.background": 0.9994, "Acc.farmland": 0.8611, "Acc.city": 0.7531, "Acc.village": 0.5647, "Acc.water": 0.7901, "Acc.forest": 0.9471, "Acc.grass": 0.1286, "Acc.road": 0.5008, "Acc.others": 0.0127, "data_time": 0.00608, "decode.loss_seg": 0.33933, "decode.acc_seg": 87.74772, "aux.loss_seg": 0.49406, "aux.acc_seg": 78.80851, "loss": 0.83339, "time": 17.71893}
{"mode": "train", "epoch": 1, "iter": 3815, "lr": 0.00775, "memory": 9253, "aAcc": 0.8638, "mIoU": 0.522, "mAcc": 0.6096, "IoU.background": 0.9983, "IoU.farmland": 0.77, "IoU.city": 0.5017, "IoU.village": 0.4299, "IoU.water": 0.6749, "IoU.forest": 0.8488, "IoU.grass": 0.0973, "IoU.road": 0.3715, "IoU.others": 0.0055, "Acc.background": 0.9993, "Acc.farmland": 0.8644, "Acc.city": 0.6982, "Acc.village": 0.5462, "Acc.water": 0.7862, "Acc.forest": 0.9477, "Acc.grass": 0.1242, "Acc.road": 0.5136, "Acc.others": 0.0065, "data_time": 0.00569, "decode.loss_seg": 0.34582, "decode.acc_seg": 87.48307, "aux.loss_seg": 0.4879, "aux.acc_seg": 78.4231, "loss": 0.83372, "time": 17.84238}
{"mode": "train", "epoch": 1, "iter": 3815, "lr": 0.00718, "memory": 9253, "aAcc": 0.8643, "mIoU": 0.5268, "mAcc": 0.6159, "IoU.background": 0.9982, "IoU.farmland": 0.7703, "IoU.city": 0.5069, "IoU.village": 0.4432, "IoU.water": 0.6798, "IoU.forest": 0.8505, "IoU.grass": 0.0989, "IoU.road": 0.3782, "IoU.others": 0.0149, "Acc.background": 0.9991, "Acc.farmland": 0.876, "Acc.city": 0.7091, "Acc.village": 0.5676, "Acc.water": 0.7796, "Acc.forest": 0.9396, "Acc.grass": 0.1332, "Acc.road": 0.5219, "Acc.others": 0.0172, "data_time": 0.00585, "decode.loss_seg": 0.33877, "decode.acc_seg": 87.76917, "aux.loss_seg": 0.48606, "aux.acc_seg": 80.4349, "loss": 0.82482, "time": 296.91128}
{"mode": "train", "epoch": 1, "iter": 3815, "lr": 0.0066, "memory": 9253, "aAcc": 0.8653, "mIoU": 0.5246, "mAcc": 0.6108, "IoU.background": 0.9982, "IoU.farmland": 0.7713, "IoU.city": 0.4981, "IoU.village": 0.4569, "IoU.water": 0.6803, "IoU.forest": 0.8511, "IoU.grass": 0.0987, "IoU.road": 0.3576, "IoU.others": 0.0089, "Acc.background": 0.9991, "Acc.farmland": 0.8722, "Acc.city": 0.6703, "Acc.village": 0.6185, "Acc.water": 0.7989, "Acc.forest": 0.9424, "Acc.grass": 0.1272, "Acc.road": 0.4586, "Acc.others": 0.0103, "data_time": 0.00583, "decode.loss_seg": 0.34046, "decode.acc_seg": 87.67239, "aux.loss_seg": 0.48514, "aux.acc_seg": 80.73821, "loss": 0.8256, "time": 15.5462}
{"mode": "train", "epoch": 1, "iter": 3815, "lr": 0.00601, "memory": 9253, "aAcc": 0.8657, "mIoU": 0.5148, "mAcc": 0.5873, "IoU.background": 0.9981, "IoU.farmland": 0.7703, "IoU.city": 0.415, "IoU.village": 0.4476, "IoU.water": 0.6818, "IoU.forest": 0.8512, "IoU.grass": 0.0939, "IoU.road": 0.3668, "IoU.others": 0.0084, "Acc.background": 0.9988, "Acc.farmland": 0.8774, "Acc.city": 0.4867, "Acc.village": 0.5736, "Acc.water": 0.7884, "Acc.forest": 0.9449, "Acc.grass": 0.1158, "Acc.road": 0.4895, "Acc.others": 0.0104, "data_time": 0.00553, "decode.loss_seg": 0.32975, "decode.acc_seg": 88.04596, "aux.loss_seg": 0.4775, "aux.acc_seg": 79.19134, "loss": 0.80725, "time": 12.66862}
{"mode": "train", "epoch": 1, "iter": 3815, "lr": 0.00542, "memory": 9253, "aAcc": 0.8652, "mIoU": 0.5238, "mAcc": 0.6063, "IoU.background": 0.998, "IoU.farmland": 0.7714, "IoU.city": 0.4628, "IoU.village": 0.4491, "IoU.water": 0.6804, "IoU.forest": 0.8522, "IoU.grass": 0.0962, "IoU.road": 0.3836, "IoU.others": 0.0202, "Acc.background": 0.9996, "Acc.farmland": 0.8721, "Acc.city": 0.56, "Acc.village": 0.5841, "Acc.water": 0.7971, "Acc.forest": 0.94, "Acc.grass": 0.1238, "Acc.road": 0.5509, "Acc.others": 0.0295, "data_time": 0.00515, "decode.loss_seg": 0.32971, "decode.acc_seg": 88.08322, "aux.loss_seg": 0.4852, "aux.acc_seg": 80.60086, "loss": 0.81491, "time": 13.24666}
{"mode": "train", "epoch": 1, "iter": 3815, "lr": 0.00482, "memory": 9253, "aAcc": 0.8641, "mIoU": 0.5246, "mAcc": 0.6176, "IoU.background": 0.9982, "IoU.farmland": 0.7691, "IoU.city": 0.4953, "IoU.village": 0.4544, "IoU.water": 0.6713, "IoU.forest": 0.8501, "IoU.grass": 0.0972, "IoU.road": 0.3759, "IoU.others": 0.0095, "Acc.background": 0.9995, "Acc.farmland": 0.8634, "Acc.city": 0.6894, "Acc.village": 0.5971, "Acc.water": 0.8252, "Acc.forest": 0.9414, "Acc.grass": 0.1276, "Acc.road": 0.503, "Acc.others": 0.0122, "data_time": 0.00557, "decode.loss_seg": 0.32505, "decode.acc_seg": 88.28536, "aux.loss_seg": 0.47571, "aux.acc_seg": 80.27729, "loss": 0.80076, "time": 15.62163}
{"mode": "train", "epoch": 1, "iter": 3815, "lr": 0.00421, "memory": 9253, "aAcc": 0.8648, "mIoU": 0.5243, "mAcc": 0.6211, "IoU.background": 0.9983, "IoU.farmland": 0.7699, "IoU.city": 0.4918, "IoU.village": 0.464, "IoU.water": 0.678, "IoU.forest": 0.8506, "IoU.grass": 0.0925, "IoU.road": 0.3667, "IoU.others": 0.0073, "Acc.background": 0.999, "Acc.farmland": 0.8551, "Acc.city": 0.7209, "Acc.village": 0.6473, "Acc.water": 0.8111, "Acc.forest": 0.946, "Acc.grass": 0.1171, "Acc.road": 0.4849, "Acc.others": 0.0082, "data_time": 0.00581, "decode.loss_seg": 0.32973, "decode.acc_seg": 88.06049, "aux.loss_seg": 0.4736, "aux.acc_seg": 80.31982, "loss": 0.80333, "time": 15.66607}
{"mode": "train", "epoch": 1, "iter": 3815, "lr": 0.00359, "memory": 9253, "aAcc": 0.8657, "mIoU": 0.5255, "mAcc": 0.6098, "IoU.background": 0.9983, "IoU.farmland": 0.7717, "IoU.city": 0.4894, "IoU.village": 0.4519, "IoU.water": 0.6835, "IoU.forest": 0.8515, "IoU.grass": 0.1024, "IoU.road": 0.3686, "IoU.others": 0.0122, "Acc.background": 0.9992, "Acc.farmland": 0.871, "Acc.city": 0.6445, "Acc.village": 0.595, "Acc.water": 0.802, "Acc.forest": 0.9437, "Acc.grass": 0.1338, "Acc.road": 0.4848, "Acc.others": 0.0145, "data_time": 0.00687, "decode.loss_seg": 0.32555, "decode.acc_seg": 88.16084, "aux.loss_seg": 0.47491, "aux.acc_seg": 80.09467, "loss": 0.80046, "time": 14.04053}
{"mode": "train", "epoch": 1, "iter": 3815, "lr": 0.00296, "memory": 9253, "aAcc": 0.8654, "mIoU": 0.522, "mAcc": 0.6043, "IoU.background": 0.9982, "IoU.farmland": 0.7703, "IoU.city": 0.4896, "IoU.village": 0.432, "IoU.water": 0.6791, "IoU.forest": 0.8512, "IoU.grass": 0.0972, "IoU.road": 0.3708, "IoU.others": 0.0092, "Acc.background": 0.9989, "Acc.farmland": 0.8812, "Acc.city": 0.6689, "Acc.village": 0.5408, "Acc.water": 0.7794, "Acc.forest": 0.9439, "Acc.grass": 0.1225, "Acc.road": 0.4928, "Acc.others": 0.0105, "data_time": 0.00582, "decode.loss_seg": 0.32602, "decode.acc_seg": 88.18047, "aux.loss_seg": 0.47845, "aux.acc_seg": 79.29413, "loss": 0.80447, "time": 16.72469}
{"mode": "train", "epoch": 1, "iter": 3815, "lr": 0.00231, "memory": 9253, "aAcc": 0.866, "mIoU": 0.5269, "mAcc": 0.613, "IoU.background": 0.9982, "IoU.farmland": 0.7712, "IoU.city": 0.4932, "IoU.village": 0.4546, "IoU.water": 0.6825, "IoU.forest": 0.853, "IoU.grass": 0.1013, "IoU.road": 0.3759, "IoU.others": 0.0122, "Acc.background": 0.9994, "Acc.farmland": 0.8824, "Acc.city": 0.6435, "Acc.village": 0.6, "Acc.water": 0.8009, "Acc.forest": 0.9358, "Acc.grass": 0.1293, "Acc.road": 0.5107, "Acc.others": 0.0146, "data_time": 0.00546, "decode.loss_seg": 0.3316, "decode.acc_seg": 88.00878, "aux.loss_seg": 0.48063, "aux.acc_seg": 80.78099, "loss": 0.81222, "time": 17.09821}