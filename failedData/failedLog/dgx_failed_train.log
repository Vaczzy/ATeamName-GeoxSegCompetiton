2021-08-10 12:50:45,745 - mmseg - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.11 (default, Aug  3 2021, 15:09:35) [GCC 7.5.0]
CUDA available: True
GPU 0,1,2,3: A100-SXM-80GB
GPU 4: DGX Display
CUDA_HOME: /usr/local/cuda
NVCC: Build cuda_11.0_bu.TC445_37.28845127_0
GCC: gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0
PyTorch: 1.8.1
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.3-Product Build 20210617 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.9.1
OpenCV: 4.5.3
MMCV: 1.3.10
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.1
MMSegmentation: 0.15.0+4d34581
------------------------------------------------------------

2021-08-10 12:50:45,746 - mmseg - INFO - Distributed training: False
2021-08-10 12:50:45,999 - mmseg - INFO - Config:
norm_cfg = dict(type='BN', requires_grad=True)
model = dict(
    type='EncoderDecoder',
    backbone=dict(
        type='ResNetV1c',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        dilations=(1, 1, 2, 4),
        strides=(1, 2, 1, 1),
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=False,
        style='pytorch',
        contract_dilation=True,
        init_cfg=dict(
            type='Pretrained', checkpoint='open-mmlab://resnet50_v1c')),
    decode_head=dict(
        type='DepthwiseSeparableASPPHead',
        in_channels=2048,
        in_index=3,
        channels=512,
        dilations=(1, 12, 24, 36),
        c1_in_channels=256,
        c1_channels=48,
        dropout_ratio=0.1,
        num_classes=9,
        norm_cfg=dict(type='BN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),
    auxiliary_head=dict(
        type='FCNHead',
        in_channels=1024,
        in_index=2,
        channels=256,
        num_convs=1,
        concat_input=False,
        dropout_ratio=0.1,
        num_classes=9,
        norm_cfg=dict(type='BN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(type='LovaszLoss', loss_weight=0.8)),
    train_cfg=dict(),
    test_cfg=dict(mode='whole'))
dataset_type = 'ADE20KDataset'
data_root = '/home/dgx/workspace/XiangTan/competition'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
crop_size = (256, 256)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', reduce_zero_label=True),
    dict(type='Resize', img_scale=(256, 256), ratio_range=(0.5, 2.0)),
    dict(type='RandomCrop', crop_size=(256, 256), cat_max_ratio=0.75),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PhotoMetricDistortion'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size=(256, 256), pad_val=0, seg_pad_val=255),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_semantic_seg'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(256, 256),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=8,
    workers_per_gpu=8,
    train=dict(
        type='ADE20KDataset',
        data_root='/home/dgx/workspace/XiangTan/competition',
        img_dir='images/training',
        ann_dir='annotations/training_max8',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', reduce_zero_label=True),
            dict(type='Resize', img_scale=(256, 256), ratio_range=(0.5, 2.0)),
            dict(type='RandomCrop', crop_size=(256, 256), cat_max_ratio=0.75),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PhotoMetricDistortion'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size=(256, 256), pad_val=0, seg_pad_val=255),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_semantic_seg'])
        ]),
    val=dict(
        type='ADE20KDataset',
        data_root='/home/dgx/workspace/XiangTan/competition',
        img_dir='images/validation',
        ann_dir='annotations/validation_max8',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(256, 256),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='ADE20KDataset',
        data_root='/home/dgx/workspace/XiangTan/competition',
        img_dir='images/validation',
        ann_dir='annotations/validation_max8',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(256, 256),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
log_config = dict(
    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
cudnn_benchmark = True
optimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)
optimizer_config = dict()
lr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)
runner = dict(type='IterBasedRunner', max_iters=160000)
checkpoint_config = dict(by_epoch=False, interval=16000)
evaluation = dict(interval=160, metric='mIoU')
work_dir = '/home/dgx/workspace/XiangTan/competition/mmseg_work/dgx_config_ce_ll_weight'
gpu_ids = range(0, 1)

2021-08-10 12:50:47,185 - mmseg - INFO - initialize ResNetV1c with init_cfg {'type': 'Pretrained', 'checkpoint': 'open-mmlab://resnet50_v1c'}
2021-08-10 12:50:47,316 - mmseg - INFO - initialize DepthwiseSeparableASPPHead with init_cfg {'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
2021-08-10 12:50:47,542 - mmseg - INFO - initialize FCNHead with init_cfg {'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
Name of parameter - Initialization information
backbone.stem.0.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.stem.1.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.stem.1.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.stem.3.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.stem.4.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.stem.4.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.stem.6.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.stem.7.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.stem.7.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer1.0.conv1.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer1.0.bn1.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer1.0.bn1.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer1.0.conv2.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer1.0.bn2.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer1.0.bn2.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer1.0.conv3.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer1.0.bn3.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer1.0.bn3.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer1.0.downsample.0.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer1.0.downsample.1.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer1.0.downsample.1.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer1.1.conv1.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer1.1.bn1.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer1.1.bn1.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer1.1.conv2.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer1.1.bn2.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer1.1.bn2.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer1.1.conv3.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer1.1.bn3.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer1.1.bn3.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer1.2.conv1.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer1.2.bn1.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer1.2.bn1.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer1.2.conv2.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer1.2.bn2.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer1.2.bn2.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer1.2.conv3.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer1.2.bn3.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer1.2.bn3.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer2.0.conv1.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer2.0.bn1.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer2.0.bn1.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer2.0.conv2.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer2.0.bn2.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer2.0.bn2.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer2.0.conv3.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer2.0.bn3.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer2.0.bn3.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer2.0.downsample.0.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer2.0.downsample.1.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer2.0.downsample.1.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer2.1.conv1.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer2.1.bn1.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer2.1.bn1.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer2.1.conv2.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer2.1.bn2.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer2.1.bn2.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer2.1.conv3.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer2.1.bn3.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer2.1.bn3.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer2.2.conv1.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer2.2.bn1.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer2.2.bn1.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer2.2.conv2.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer2.2.bn2.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer2.2.bn2.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer2.2.conv3.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer2.2.bn3.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer2.2.bn3.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer2.3.conv1.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer2.3.bn1.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer2.3.bn1.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer2.3.conv2.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer2.3.bn2.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer2.3.bn2.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer2.3.conv3.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer2.3.bn3.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer2.3.bn3.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.0.conv1.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.0.bn1.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.0.bn1.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.0.conv2.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.0.bn2.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.0.bn2.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.0.conv3.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.0.bn3.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.0.bn3.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.0.downsample.0.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.0.downsample.1.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.0.downsample.1.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.1.conv1.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.1.bn1.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.1.bn1.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.1.conv2.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.1.bn2.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.1.bn2.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.1.conv3.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.1.bn3.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.1.bn3.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.2.conv1.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.2.bn1.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.2.bn1.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.2.conv2.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.2.bn2.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.2.bn2.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.2.conv3.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.2.bn3.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.2.bn3.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.3.conv1.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.3.bn1.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.3.bn1.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.3.conv2.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.3.bn2.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.3.bn2.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.3.conv3.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.3.bn3.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.3.bn3.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.4.conv1.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.4.bn1.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.4.bn1.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.4.conv2.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.4.bn2.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.4.bn2.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.4.conv3.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.4.bn3.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.4.bn3.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.5.conv1.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.5.bn1.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.5.bn1.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.5.conv2.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.5.bn2.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.5.bn2.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.5.conv3.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.5.bn3.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer3.5.bn3.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer4.0.conv1.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer4.0.bn1.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer4.0.bn1.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer4.0.conv2.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer4.0.bn2.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer4.0.bn2.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer4.0.conv3.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer4.0.bn3.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer4.0.bn3.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer4.0.downsample.0.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer4.0.downsample.1.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer4.0.downsample.1.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer4.1.conv1.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer4.1.bn1.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer4.1.bn1.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer4.1.conv2.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer4.1.bn2.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer4.1.bn2.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer4.1.conv3.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer4.1.bn3.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer4.1.bn3.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer4.2.conv1.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer4.2.bn1.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer4.2.bn1.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer4.2.conv2.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer4.2.bn2.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer4.2.bn2.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer4.2.conv3.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer4.2.bn3.weight - PretrainedInit: load from open-mmlab://resnet50_v1c 
backbone.layer4.2.bn3.bias - PretrainedInit: load from open-mmlab://resnet50_v1c 
decode_head.conv_seg.weight - NormalInit: mean=0, std=0.01, bias=0 
decode_head.conv_seg.bias - NormalInit: mean=0, std=0.01, bias=0 
decode_head.image_pool.1.conv.weight - The value is the same before and after calling `init_weights` of EncoderDecoder  
decode_head.image_pool.1.bn.weight - The value is the same before and after calling `init_weights` of EncoderDecoder  
decode_head.image_pool.1.bn.bias - The value is the same before and after calling `init_weights` of EncoderDecoder  
decode_head.aspp_modules.0.conv.weight - The value is the same before and after calling `init_weights` of EncoderDecoder  
decode_head.aspp_modules.0.bn.weight - The value is the same before and after calling `init_weights` of EncoderDecoder  
decode_head.aspp_modules.0.bn.bias - The value is the same before and after calling `init_weights` of EncoderDecoder  
decode_head.aspp_modules.1.depthwise_conv.conv.weight - The value is the same before and after calling `init_weights` of EncoderDecoder  
decode_head.aspp_modules.1.depthwise_conv.bn.weight - The value is the same before and after calling `init_weights` of EncoderDecoder  
decode_head.aspp_modules.1.depthwise_conv.bn.bias - The value is the same before and after calling `init_weights` of EncoderDecoder  
decode_head.aspp_modules.1.pointwise_conv.conv.weight - The value is the same before and after calling `init_weights` of EncoderDecoder  
decode_head.aspp_modules.1.pointwise_conv.bn.weight - The value is the same before and after calling `init_weights` of EncoderDecoder  
decode_head.aspp_modules.1.pointwise_conv.bn.bias - The value is the same before and after calling `init_weights` of EncoderDecoder  
decode_head.aspp_modules.2.depthwise_conv.conv.weight - The value is the same before and after calling `init_weights` of EncoderDecoder  
decode_head.aspp_modules.2.depthwise_conv.bn.weight - The value is the same before and after calling `init_weights` of EncoderDecoder  
decode_head.aspp_modules.2.depthwise_conv.bn.bias - The value is the same before and after calling `init_weights` of EncoderDecoder  
decode_head.aspp_modules.2.pointwise_conv.conv.weight - The value is the same before and after calling `init_weights` of EncoderDecoder  
decode_head.aspp_modules.2.pointwise_conv.bn.weight - The value is the same before and after calling `init_weights` of EncoderDecoder  
decode_head.aspp_modules.2.pointwise_conv.bn.bias - The value is the same before and after calling `init_weights` of EncoderDecoder  
decode_head.aspp_modules.3.depthwise_conv.conv.weight - The value is the same before and after calling `init_weights` of EncoderDecoder  
decode_head.aspp_modules.3.depthwise_conv.bn.weight - The value is the same before and after calling `init_weights` of EncoderDecoder  
decode_head.aspp_modules.3.depthwise_conv.bn.bias - The value is the same before and after calling `init_weights` of EncoderDecoder  
decode_head.aspp_modules.3.pointwise_conv.conv.weight - The value is the same before and after calling `init_weights` of EncoderDecoder  
decode_head.aspp_modules.3.pointwise_conv.bn.weight - The value is the same before and after calling `init_weights` of EncoderDecoder  
decode_head.aspp_modules.3.pointwise_conv.bn.bias - The value is the same before and after calling `init_weights` of EncoderDecoder  
decode_head.bottleneck.conv.weight - Initialized by user-defined `init_weights` in ConvModule  
decode_head.bottleneck.bn.weight - The value is the same before and after calling `init_weights` of EncoderDecoder  
decode_head.bottleneck.bn.bias - The value is the same before and after calling `init_weights` of EncoderDecoder  
decode_head.c1_bottleneck.conv.weight - Initialized by user-defined `init_weights` in ConvModule  
decode_head.c1_bottleneck.bn.weight - The value is the same before and after calling `init_weights` of EncoderDecoder  
decode_head.c1_bottleneck.bn.bias - The value is the same before and after calling `init_weights` of EncoderDecoder  
decode_head.sep_bottleneck.0.depthwise_conv.conv.weight - The value is the same before and after calling `init_weights` of EncoderDecoder  
decode_head.sep_bottleneck.0.depthwise_conv.bn.weight - The value is the same before and after calling `init_weights` of EncoderDecoder  
decode_head.sep_bottleneck.0.depthwise_conv.bn.bias - The value is the same before and after calling `init_weights` of EncoderDecoder  
decode_head.sep_bottleneck.0.pointwise_conv.conv.weight - The value is the same before and after calling `init_weights` of EncoderDecoder  
decode_head.sep_bottleneck.0.pointwise_conv.bn.weight - The value is the same before and after calling `init_weights` of EncoderDecoder  
decode_head.sep_bottleneck.0.pointwise_conv.bn.bias - The value is the same before and after calling `init_weights` of EncoderDecoder  
decode_head.sep_bottleneck.1.depthwise_conv.conv.weight - The value is the same before and after calling `init_weights` of EncoderDecoder  
decode_head.sep_bottleneck.1.depthwise_conv.bn.weight - The value is the same before and after calling `init_weights` of EncoderDecoder  
decode_head.sep_bottleneck.1.depthwise_conv.bn.bias - The value is the same before and after calling `init_weights` of EncoderDecoder  
decode_head.sep_bottleneck.1.pointwise_conv.conv.weight - The value is the same before and after calling `init_weights` of EncoderDecoder  
decode_head.sep_bottleneck.1.pointwise_conv.bn.weight - The value is the same before and after calling `init_weights` of EncoderDecoder  
decode_head.sep_bottleneck.1.pointwise_conv.bn.bias - The value is the same before and after calling `init_weights` of EncoderDecoder  
auxiliary_head.conv_seg.weight - NormalInit: mean=0, std=0.01, bias=0 
auxiliary_head.conv_seg.bias - NormalInit: mean=0, std=0.01, bias=0 
auxiliary_head.convs.0.conv.weight - The value is the same before and after calling `init_weights` of EncoderDecoder  
auxiliary_head.convs.0.bn.weight - The value is the same before and after calling `init_weights` of EncoderDecoder  
auxiliary_head.convs.0.bn.bias - The value is the same before and after calling `init_weights` of EncoderDecoder  
2021-08-10 12:50:47,544 - mmseg - INFO - EncoderDecoder(
  (backbone): ResNetV1c(
    (stem): Sequential(
      (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace=True)
      (6): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace=True)
    )
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
  )
  init_cfg={'type': 'Pretrained', 'checkpoint': 'open-mmlab://resnet50_v1c'}
  (decode_head): DepthwiseSeparableASPPHead(
    input_transform=None, ignore_index=255, align_corners=False
    (loss_decode): CrossEntropyLoss()
    (conv_seg): Conv2d(512, 9, kernel_size=(1, 1), stride=(1, 1))
    (dropout): Dropout2d(p=0.1, inplace=False)
    (image_pool): Sequential(
      (0): AdaptiveAvgPool2d(output_size=1)
      (1): ConvModule(
        (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
    )
    (aspp_modules): DepthwiseSeparableASPPModule(
      (0): ConvModule(
        (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
      (1): DepthwiseSeparableConvModule(
        (depthwise_conv): ConvModule(
          (conv): Conv2d(2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), groups=2048, bias=False)
          (bn): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (pointwise_conv): ConvModule(
          (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
      (2): DepthwiseSeparableConvModule(
        (depthwise_conv): ConvModule(
          (conv): Conv2d(2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(24, 24), dilation=(24, 24), groups=2048, bias=False)
          (bn): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (pointwise_conv): ConvModule(
          (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
      (3): DepthwiseSeparableConvModule(
        (depthwise_conv): ConvModule(
          (conv): Conv2d(2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(36, 36), dilation=(36, 36), groups=2048, bias=False)
          (bn): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (pointwise_conv): ConvModule(
          (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
    )
    (bottleneck): ConvModule(
      (conv): Conv2d(2560, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (activate): ReLU(inplace=True)
    )
    (c1_bottleneck): ConvModule(
      (conv): Conv2d(256, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (activate): ReLU(inplace=True)
    )
    (sep_bottleneck): Sequential(
      (0): DepthwiseSeparableConvModule(
        (depthwise_conv): ConvModule(
          (conv): Conv2d(560, 560, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=560, bias=False)
          (bn): BatchNorm2d(560, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (pointwise_conv): ConvModule(
          (conv): Conv2d(560, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
      (1): DepthwiseSeparableConvModule(
        (depthwise_conv): ConvModule(
          (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512, bias=False)
          (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (pointwise_conv): ConvModule(
          (conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
    )
  )
  init_cfg={'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
  (auxiliary_head): FCNHead(
    input_transform=None, ignore_index=255, align_corners=False
    (loss_decode): LovaszLoss()
    (conv_seg): Conv2d(256, 9, kernel_size=(1, 1), stride=(1, 1))
    (dropout): Dropout2d(p=0.1, inplace=False)
    (convs): Sequential(
      (0): ConvModule(
        (conv): Conv2d(1024, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
    )
  )
  init_cfg={'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
)
2021-08-10 12:50:47,763 - mmseg - INFO - Loaded 16051 images
2021-08-10 12:50:49,969 - mmseg - INFO - Loaded 3815 images
2021-08-10 12:50:49,969 - mmseg - INFO - Start running, host: dgx@geox-DGX-Station-A100-920-23487-2531-000, work_dir: /home/dgx/workspace/XiangTan/competition/mmseg_work/dgx_config_ce_ll_weight
2021-08-10 12:50:49,969 - mmseg - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2021-08-10 12:50:49,970 - mmseg - INFO - workflow: [('train', 1)], max: 160000 iters
2021-08-10 12:51:05,875 - mmseg - INFO - Iter [50/160000]	lr: 9.997e-03, eta: 13:46:12, time: 0.310, data_time: 0.005, memory: 45683, decode.loss_seg: 1.1055, decode.acc_seg: 47.4884, aux.loss_seg: 0.6955, aux.acc_seg: 9.1657, loss: 1.8010
2021-08-10 12:51:14,815 - mmseg - INFO - Iter [100/160000]	lr: 9.994e-03, eta: 10:51:13, time: 0.179, data_time: 0.002, memory: 45683, decode.loss_seg: 0.8314, decode.acc_seg: 52.2478, aux.loss_seg: 0.6589, aux.acc_seg: 18.1620, loss: 1.4903
2021-08-10 12:51:23,757 - mmseg - INFO - Iter [150/160000]	lr: 9.992e-03, eta: 9:52:49, time: 0.179, data_time: 0.002, memory: 45683, decode.loss_seg: 0.7538, decode.acc_seg: 58.9677, aux.loss_seg: 0.6156, aux.acc_seg: 41.4879, loss: 1.3694
2021-08-10 12:52:34,884 - mmseg - INFO - per class results:
2021-08-10 12:52:34,887 - mmseg - INFO - 
+------------+------+-------+
|   Class    | IoU  |  Acc  |
+------------+------+-------+
| background | 1.52 | 13.46 |
|  farmland  | 0.0  |  0.0  |
|    city    | 3.88 | 34.96 |
|  village   | 0.15 |  0.2  |
|   water    | 1.18 | 15.15 |
|   forest   | 0.0  |  0.0  |
|   grass    | 4.72 |  8.66 |
|    road    | 0.0  |  0.0  |
|   others   | 0.0  |  0.0  |
+------------+------+-------+
2021-08-10 12:52:34,887 - mmseg - INFO - Summary:
2021-08-10 12:52:34,887 - mmseg - INFO - 
+------+------+------+
| aAcc | mIoU | mAcc |
+------+------+------+
| 1.68 | 1.27 | 8.05 |
+------+------+------+
2021-08-10 12:52:34,896 - mmseg - INFO - Iter(val) [3815]	aAcc: 0.0168, mIoU: 0.0127, mAcc: 0.0805, IoU.background: 0.0152, IoU.farmland: 0.0000, IoU.city: 0.0388, IoU.village: 0.0015, IoU.water: 0.0118, IoU.forest: 0.0000, IoU.grass: 0.0472, IoU.road: 0.0000, IoU.others: 0.0000, Acc.background: 0.1346, Acc.farmland: 0.0000, Acc.city: 0.3496, Acc.village: 0.0020, Acc.water: 0.1515, Acc.forest: 0.0000, Acc.grass: 0.0866, Acc.road: 0.0000, Acc.others: 0.0000
2021-08-10 12:52:42,174 - mmseg - INFO - Iter [200/160000]	lr: 9.989e-03, eta: 1 day, 0:48:43, time: 1.568, data_time: 0.002, memory: 45683, decode.loss_seg: 0.7622, decode.acc_seg: 58.2139, aux.loss_seg: 0.5646, aux.acc_seg: 54.8354, loss: 1.3268
2021-08-10 12:52:51,138 - mmseg - INFO - Iter [250/160000]	lr: 9.986e-03, eta: 21:26:04, time: 0.179, data_time: 0.002, memory: 45683, decode.loss_seg: 0.6772, decode.acc_seg: 59.5105, aux.loss_seg: 0.5282, aux.acc_seg: 56.2676, loss: 1.2053
2021-08-10 12:53:00,090 - mmseg - INFO - Iter [300/160000]	lr: 9.983e-03, eta: 19:10:48, time: 0.179, data_time: 0.002, memory: 45683, decode.loss_seg: 0.7063, decode.acc_seg: 60.8343, aux.loss_seg: 0.5105, aux.acc_seg: 57.7123, loss: 1.2168
2021-08-10 12:54:04,952 - mmseg - INFO - per class results:
2021-08-10 12:54:04,953 - mmseg - INFO - 
+------------+------+------+
|   Class    | IoU  | Acc  |
+------------+------+------+
| background | 0.78 | 6.85 |
|  farmland  | 0.09 | 0.09 |
|    city    | 1.04 | 9.55 |
|  village   | 0.49 | 0.84 |
|   water    | 0.76 | 9.71 |
|   forest   | 0.0  | 0.0  |
|   grass    | 3.76 | 6.03 |
|    road    | 0.0  | 0.0  |
|   others   | 0.0  | 0.0  |
+------------+------+------+
2021-08-10 12:54:04,953 - mmseg - INFO - Summary:
2021-08-10 12:54:04,953 - mmseg - INFO - 
+------+------+------+
| aAcc | mIoU | mAcc |
+------+------+------+
| 1.02 | 0.77 | 3.67 |
+------+------+------+
2021-08-10 12:54:04,957 - mmseg - INFO - Iter(val) [3815]	aAcc: 0.0102, mIoU: 0.0077, mAcc: 0.0367, IoU.background: 0.0078, IoU.farmland: 0.0009, IoU.city: 0.0104, IoU.village: 0.0049, IoU.water: 0.0076, IoU.forest: 0.0000, IoU.grass: 0.0376, IoU.road: 0.0000, IoU.others: 0.0000, Acc.background: 0.0685, Acc.farmland: 0.0009, Acc.city: 0.0955, Acc.village: 0.0084, Acc.water: 0.0971, Acc.forest: 0.0000, Acc.grass: 0.0603, Acc.road: 0.0000, Acc.others: 0.0000
2021-08-10 12:54:10,400 - mmseg - INFO - Iter [350/160000]	lr: 9.981e-03, eta: 1 day, 1:20:37, time: 1.406, data_time: 0.002, memory: 45683, decode.loss_seg: 0.7059, decode.acc_seg: 59.2966, aux.loss_seg: 0.5077, aux.acc_seg: 55.7872, loss: 1.2136
2021-08-10 12:54:19,362 - mmseg - INFO - Iter [400/160000]	lr: 9.978e-03, eta: 23:09:43, time: 0.179, data_time: 0.002, memory: 45683, decode.loss_seg: 0.6994, decode.acc_seg: 62.9563, aux.loss_seg: 0.5041, aux.acc_seg: 59.2334, loss: 1.2035
2021-08-10 12:54:28,328 - mmseg - INFO - Iter [450/160000]	lr: 9.975e-03, eta: 21:27:54, time: 0.179, data_time: 0.002, memory: 45683, decode.loss_seg: 0.6632, decode.acc_seg: 60.8987, aux.loss_seg: 0.5035, aux.acc_seg: 56.4682, loss: 1.1667
2021-08-10 12:55:37,135 - mmseg - INFO - per class results:
2021-08-10 12:55:37,137 - mmseg - INFO - 
+------------+------+-------+
|   Class    | IoU  |  Acc  |
+------------+------+-------+
| background | 0.03 |  0.21 |
|  farmland  | 0.06 |  0.06 |
|    city    | 1.04 |  7.72 |
|  village   | 0.24 |  0.43 |
|   water    | 0.99 | 13.83 |
|   forest   | 0.0  |  0.0  |
|   grass    | 5.9  | 12.45 |
|    road    | 0.0  |  0.0  |
|   others   | 0.0  |  0.0  |
+------------+------+-------+
2021-08-10 12:55:37,137 - mmseg - INFO - Summary:
2021-08-10 12:55:37,137 - mmseg - INFO - 
+------+------+------+
| aAcc | mIoU | mAcc |
+------+------+------+
| 1.05 | 0.92 | 3.86 |
+------+------+------+
2021-08-10 12:55:37,157 - mmseg - INFO - Iter(val) [3815]	aAcc: 0.0105, mIoU: 0.0092, mAcc: 0.0386, IoU.background: 0.0003, IoU.farmland: 0.0006, IoU.city: 0.0104, IoU.village: 0.0024, IoU.water: 0.0099, IoU.forest: 0.0000, IoU.grass: 0.0590, IoU.road: 0.0000, IoU.others: 0.0000, Acc.background: 0.0021, Acc.farmland: 0.0006, Acc.city: 0.0772, Acc.village: 0.0043, Acc.water: 0.1383, Acc.forest: 0.0000, Acc.grass: 0.1245, Acc.road: 0.0000, Acc.others: 0.0000
2021-08-10 12:55:40,823 - mmseg - INFO - Iter [500/160000]	lr: 9.972e-03, eta: 1 day, 1:44:11, time: 1.450, data_time: 0.002, memory: 45683, decode.loss_seg: 0.6323, decode.acc_seg: 62.0667, aux.loss_seg: 0.4867, aux.acc_seg: 55.5310, loss: 1.1189
2021-08-10 12:55:49,785 - mmseg - INFO - Iter [550/160000]	lr: 9.969e-03, eta: 1 day, 0:06:39, time: 0.179, data_time: 0.002, memory: 45683, decode.loss_seg: 0.6500, decode.acc_seg: 61.3656, aux.loss_seg: 0.4845, aux.acc_seg: 53.4055, loss: 1.1345
2021-08-10 12:55:58,766 - mmseg - INFO - Iter [600/160000]	lr: 9.967e-03, eta: 22:45:27, time: 0.180, data_time: 0.002, memory: 45683, decode.loss_seg: 0.6398, decode.acc_seg: 64.7914, aux.loss_seg: 0.4891, aux.acc_seg: 57.0793, loss: 1.1289
2021-08-10 12:57:08,025 - mmseg - INFO - per class results:
2021-08-10 12:57:08,026 - mmseg - INFO - 
+------------+------+-------+
|   Class    | IoU  |  Acc  |
+------------+------+-------+
| background | 0.05 |  0.4  |
|  farmland  | 0.13 |  0.14 |
|    city    | 1.57 | 15.87 |
|  village   | 0.59 |  1.12 |
|   water    | 0.6  |  7.84 |
|   forest   | 0.0  |  0.0  |
|   grass    | 5.54 |  9.41 |
|    road    | 0.0  |  0.0  |
|   others   | 0.0  |  0.0  |
+------------+------+-------+
2021-08-10 12:57:08,026 - mmseg - INFO - Summary:
2021-08-10 12:57:08,026 - mmseg - INFO - 
+------+------+------+
| aAcc | mIoU | mAcc |
+------+------+------+
| 0.77 | 0.94 | 3.86 |
+------+------+------+
2021-08-10 12:57:08,031 - mmseg - INFO - Iter(val) [3815]	aAcc: 0.0077, mIoU: 0.0094, mAcc: 0.0386, IoU.background: 0.0005, IoU.farmland: 0.0013, IoU.city: 0.0157, IoU.village: 0.0059, IoU.water: 0.0060, IoU.forest: 0.0000, IoU.grass: 0.0554, IoU.road: 0.0000, IoU.others: 0.0000, Acc.background: 0.0040, Acc.farmland: 0.0014, Acc.city: 0.1587, Acc.village: 0.0112, Acc.water: 0.0784, Acc.forest: 0.0000, Acc.grass: 0.0941, Acc.road: 0.0000, Acc.others: 0.0000
2021-08-10 12:57:09,880 - mmseg - INFO - Iter [650/160000]	lr: 9.964e-03, eta: 1 day, 1:50:35, time: 1.422, data_time: 0.002, memory: 45683, decode.loss_seg: 0.6096, decode.acc_seg: 64.0771, aux.loss_seg: 0.4800, aux.acc_seg: 56.4315, loss: 1.0896
2021-08-10 12:57:18,833 - mmseg - INFO - Iter [700/160000]	lr: 9.961e-03, eta: 1 day, 0:33:20, time: 0.179, data_time: 0.002, memory: 45683, decode.loss_seg: 0.5672, decode.acc_seg: 63.0442, aux.loss_seg: 0.4699, aux.acc_seg: 56.0087, loss: 1.0372
2021-08-10 12:57:27,798 - mmseg - INFO - Iter [750/160000]	lr: 9.958e-03, eta: 23:26:24, time: 0.179, data_time: 0.002, memory: 45683, decode.loss_seg: 0.5967, decode.acc_seg: 63.0329, aux.loss_seg: 0.4718, aux.acc_seg: 56.2693, loss: 1.0685
2021-08-10 12:58:39,849 - mmseg - INFO - per class results:
2021-08-10 12:58:39,850 - mmseg - INFO - 
+------------+------+------+
|   Class    | IoU  | Acc  |
+------------+------+------+
| background | 0.5  | 3.79 |
|  farmland  | 0.06 | 0.06 |
|    city    | 1.16 | 16.1 |
|  village   | 0.42 | 1.15 |
|   water    | 0.66 | 8.25 |
|   forest   | 0.03 | 0.03 |
|   grass    | 5.46 | 9.79 |
|    road    | 0.0  | 0.0  |
|   others   | 0.0  | 0.0  |
+------------+------+------+
2021-08-10 12:58:39,850 - mmseg - INFO - Summary:
2021-08-10 12:58:39,851 - mmseg - INFO - 
+------+------+------+
| aAcc | mIoU | mAcc |
+------+------+------+
| 0.95 | 0.92 | 4.35 |
+------+------+------+
2021-08-10 12:58:39,857 - mmseg - INFO - Iter [3815/160000]	lr: 9.955e-03, eta: 1 day, 1:57:07, time: 1.441, data_time: 0.002, memory: 45683, aAcc: 0.0095, mIoU: 0.0092, mAcc: 0.0435, IoU.background: 0.0050, IoU.farmland: 0.0006, IoU.city: 0.0116, IoU.village: 0.0042, IoU.water: 0.0066, IoU.forest: 0.0003, IoU.grass: 0.0546, IoU.road: 0.0000, IoU.others: 0.0000, Acc.background: 0.0379, Acc.farmland: 0.0006, Acc.city: 0.1610, Acc.village: 0.0115, Acc.water: 0.0825, Acc.forest: 0.0003, Acc.grass: 0.0979, Acc.road: 0.0000, Acc.others: 0.0000, decode.loss_seg: 0.6212, decode.acc_seg: 64.8541, aux.loss_seg: 0.4782, aux.acc_seg: 58.0642, loss: 1.0994
2021-08-10 12:58:48,922 - mmseg - INFO - Iter [850/160000]	lr: 9.953e-03, eta: 1 day, 0:53:19, time: 0.181, data_time: 0.002, memory: 45683, decode.loss_seg: 0.6416, decode.acc_seg: 61.6952, aux.loss_seg: 0.4862, aux.acc_seg: 55.5621, loss: 1.1278
2021-08-10 12:58:57,880 - mmseg - INFO - Iter [900/160000]	lr: 9.950e-03, eta: 23:56:18, time: 0.179, data_time: 0.002, memory: 45683, decode.loss_seg: 0.6017, decode.acc_seg: 59.1967, aux.loss_seg: 0.4770, aux.acc_seg: 52.5485, loss: 1.0787
2021-08-10 12:59:06,848 - mmseg - INFO - Iter [950/160000]	lr: 9.947e-03, eta: 23:05:18, time: 0.179, data_time: 0.002, memory: 45683, decode.loss_seg: 0.6128, decode.acc_seg: 62.2624, aux.loss_seg: 0.4792, aux.acc_seg: 55.2101, loss: 1.0920
2021-08-10 13:00:11,478 - mmseg - INFO - per class results:
2021-08-10 13:00:11,479 - mmseg - INFO - 
+------------+------+-------+
|   Class    | IoU  |  Acc  |
+------------+------+-------+
| background | 0.07 |  0.54 |
|  farmland  | 0.06 |  0.06 |
|    city    | 1.41 | 18.54 |
|  village   | 0.55 |  1.59 |
|   water    | 0.55 |  6.52 |
|   forest   | 0.0  |  0.0  |
|   grass    | 4.06 |  6.73 |
|    road    | 0.0  |  0.0  |
|   others   | 0.0  |  0.0  |
+------------+------+-------+
2021-08-10 13:00:11,479 - mmseg - INFO - Summary:
2021-08-10 13:00:11,479 - mmseg - INFO - 
+------+------+------+
| aAcc | mIoU | mAcc |
+------+------+------+
| 0.66 | 0.74 | 3.78 |
+------+------+------+
2021-08-10 13:00:11,487 - mmseg - INFO - Iter(val) [3815]	aAcc: 0.0066, mIoU: 0.0074, mAcc: 0.0378, IoU.background: 0.0007, IoU.farmland: 0.0006, IoU.city: 0.0141, IoU.village: 0.0055, IoU.water: 0.0055, IoU.forest: 0.0000, IoU.grass: 0.0406, IoU.road: 0.0000, IoU.others: 0.0000, Acc.background: 0.0054, Acc.farmland: 0.0006, Acc.city: 0.1854, Acc.village: 0.0159, Acc.water: 0.0652, Acc.forest: 0.0000, Acc.grass: 0.0673, Acc.road: 0.0000, Acc.others: 0.0000
2021-08-10 13:00:18,735 - mmseg - INFO - Exp name: deeplabv3plus_r50-d8_512x512_160k_ade20k.py
2021-08-10 13:00:18,735 - mmseg - INFO - Iter [1000/160000]	lr: 9.944e-03, eta: 1 day, 1:06:08, time: 1.438, data_time: 0.002, memory: 45683, decode.loss_seg: 0.5634, decode.acc_seg: 62.1583, aux.loss_seg: 0.4624, aux.acc_seg: 55.7658, loss: 1.0258
2021-08-10 13:00:27,718 - mmseg - INFO - Iter [1050/160000]	lr: 9.942e-03, eta: 1 day, 0:16:37, time: 0.180, data_time: 0.002, memory: 45683, decode.loss_seg: 0.5890, decode.acc_seg: 65.1075, aux.loss_seg: 0.4628, aux.acc_seg: 57.8868, loss: 1.0518
2021-08-10 13:00:36,702 - mmseg - INFO - Iter [1100/160000]	lr: 9.939e-03, eta: 23:31:36, time: 0.180, data_time: 0.002, memory: 45683, decode.loss_seg: 0.5705, decode.acc_seg: 65.1868, aux.loss_seg: 0.4635, aux.acc_seg: 58.3315, loss: 1.0340
2021-08-10 13:01:44,409 - mmseg - INFO - per class results:
2021-08-10 13:01:44,410 - mmseg - INFO - 
+------------+------+-------+
|   Class    | IoU  |  Acc  |
+------------+------+-------+
| background | 0.01 |  0.1  |
|  farmland  | 0.07 |  0.07 |
|    city    | 1.86 | 25.37 |
|  village   | 0.25 |  0.72 |
|   water    | 0.58 |  6.95 |
|   forest   | 0.03 |  0.03 |
|   grass    | 5.34 | 10.26 |
|    road    | 0.0  |  0.0  |
|   others   | 0.0  |  0.0  |
+------------+------+-------+
2021-08-10 13:01:44,410 - mmseg - INFO - Summary:
2021-08-10 13:01:44,410 - mmseg - INFO - 
+------+------+------+
| aAcc | mIoU | mAcc |
+------+------+------+
| 0.75 | 0.9  | 4.83 |
+------+------+------+
2021-08-10 13:01:44,416 - mmseg - INFO - Iter(val) [3815]	aAcc: 0.0075, mIoU: 0.0090, mAcc: 0.0483, IoU.background: 0.0001, IoU.farmland: 0.0007, IoU.city: 0.0186, IoU.village: 0.0025, IoU.water: 0.0058, IoU.forest: 0.0003, IoU.grass: 0.0534, IoU.road: 0.0000, IoU.others: 0.0000, Acc.background: 0.0010, Acc.farmland: 0.0007, Acc.city: 0.2537, Acc.village: 0.0072, Acc.water: 0.0695, Acc.forest: 0.0003, Acc.grass: 0.1026, Acc.road: 0.0000, Acc.others: 0.0000
